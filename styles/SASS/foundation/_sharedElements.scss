/* ----------------------- IMPORTS ----------------------------- */

@import '_colors.scss';
@import '_fonts.scss';

/* ----------------------- MIX-INS ----------------------------- */

// Even for those mix-ins that accept no parameters, keep them as mix-ins instead of placeholders.
// It's possible that later on, parameters will be added to allow for variations in the base stylings
// defined below.

/*
 * Mix-in responsible for styling any informational row
 *
 * @author kinsho
 */
@mixin infoRow()
{
	@extend %regularFont;
	@extend %italicizedFont;

	margin:
	{
		top: 5px;
		bottom: 5px;
	}

	padding:
	{
		top: 10px;
		bottom: 10px;
		left: 10px;
		right: 10px;
	}

	border:
	{
		width: 1px;
		style: solid;
		color: map-get($COLORS, blueTheme);
		radius: 10px;
	}

	display: inline-block;
	background-color: map-get($COLORS, lightBlueTheme);

	&.centerRow
	{
		margin:
		{
			left: auto;
			right: auto;
		}
	}

	// The image for the informational row must always be displayed against the left edge
	& > .infoRowImage
	{
		float: left;
	}

	// The content for the informational row should be placed to the right of the image
	& > .infoRowContent
	{
		padding:
		{
			left: 10px;
		}

		float: right;
	}
}

/*
 * Mix-in responsible for setting styling on hint tip icons
 *
 * @author kinsho
 */
@mixin hintTip()
{
	margin:
	{
		left: 10px;
		right: 10px;
	}
}

/*
 * Mix-in responsible for setting basic styling for any tag
 *
 * @param [$topOrBottom] - value indicating whether the tab is to be placed on top of
 *		some container or on the bottom of a container. The only valid values here are
 *		'top' or 'bottom'
 *
 * @author kinsho
 */
@mixin tab($topOrBottom: top)
{
	border:
	{
		width: 1px;
		style: solid;
		color: $blueTheme;
		@if $topOrBottom == 'top'
		{
			top-left-radius: 25px;
			top-right-radius: 25px;
		}
		@else if $topOrBottom == 'bottom'
		{
			bottom-left-radius: 25px;
			bottom-right-radius: 25px;
		}
	}

	padding:
	{
		left: 10px;
		right: 10px;
		top: 2px;
		bottom: 2px;
	}

	display: inline-block;
	text-align: center;
	background-color: map-get($COLORS, lightBlueTheme);

	@content;
}

/*
 * Mixin responsible for generating a quick little label that can be placed next to text in 
 * order to adorn that text with an additional qualifier
 *
 * @param $content - the text to put into the label
 *
 * @author kinsho
 */
@mixin labelIcon($content)
{
	&:after
	{
		@extend %smallFont;

		border:
		{
			style: solid;
			width: 1px;
			radius: 3px;
			color: map-get($COLORS, darkGrayTheme);
		}

		padding:
		{
			left: 3px;
			right: 3px;
		}

		content: $content;

		color: map-get($COLORS, lightWhiteTheme);
		text-shadow: 0.75px 0.75px 0 #000000;
		background-color: map-get($COLORS, darkGreenTheme);

		@content;
	}
}

/*
 * Mixin responsible for providing all the styling for a suggestion box associated with an autocomplete
 * form field
 *
 * @param $zIndex - the depth of the image relative to the viewport
 *
 * @author kinsho
 */
@mixin autocompleteSuggestionBox($zIndex)
{
	@extend %regularFont;

	border:
	{
		style: solid;
		width: 1px;
		color: map-get($COLORS, blackTheme);
		bottom-right-radius: 10px;
		bottom-left-radius: 10px;
	}

	background-color: map-get($COLORS, lightGrayTheme);
	z-index: $zIndex;
	position: absolute;

	max-height: 100px;
	overflow: auto;

	&.modalSuggestionBox
	{
		@extend %tinyFont;
	}

	& > div
	{
		padding:
		{
			top: 5px;
			bottom: 5px;
			left: 10px;
			right: 10px;
		}

		cursor: pointer;

		&.disabled
		{
			@extend %italicizedFont;

			cursor: default;
			background-color: map-get($COLORS, lightGrayTheme);
		}

		&:hover
		{
			background-color: map-get($COLORS, lightBlueTheme);
		}
	}

	@content;
}

/*
 * Mixin responsible for providing all the styling for toggleSwitches
 *
 * @author kinsho
 */
@mixin toggleSwitch()
{
	@extend %minorWhiteFont;

	min-height: 20px;

	margin:
	{
		top: 5px;
		bottom: 5px;
	}

	border:
	{
		color: map-get($COLORS, darkGrayTheme);
		width: 2px;
	}

	& > .toggleLabel
	{
		// Allow the background color to be animated
		@include transitionSettings($property: background-color, $timing: linear, $duration: 0.5s);

		padding:
		{
			top: 5px;
			bottom: 5px;
			left: 13px;
			right: 13px;
		}

		border:
		{
			style: solid;
			color: map-get($COLORS, darkGrayTheme);
			width: 2px;
		}

		background-color: map-get($COLORS, grayTheme);
		cursor: pointer;

		&:first-of-type
		{
			border:
			{
				top-left-radius: 10px;
				bottom-left-radius: 10px;
			}
		}

		&:last-of-type
		{
			border:
			{
				top-right-radius: 10px;
				bottom-right-radius: 10px;
			}
		}

		&.toggleSelected
		{
			background-color: $greenTheme;
			cursor: default;
		}
	}

	@content;
}

/*
 * Mixin responsible for surrounding the target element with horizontal rules in order to emphasize
 * the text within the element
 *
 * @author kinsho
 */
@mixin horizontalRule()
{
	// Ensure the text remains appropriately distanced from the horizontal rules
	padding:
	{
		left: 10px;
		right: 10px;
	}

	text-align: center;

	// Place horizontal lines before and after the text in focus here
	&:before, &:after
	{
		padding:
		{
			bottom: 0.5em;
		}

		height: 1px;
		width: 45%;

		display: inline-block;
		background-color: map-get($COLORS, darkGrayTheme);
	}
}

/*
 * Mix-in designed to generate a circular container
 *
 * @param $diameter - a measurement of the size of the circle that will need to be generated
 * @param $color - the color to fill into the circle upon render
 *
 * @author kinsho
 */
@mixin circle($diameter, $color)
{
	border:
	{
		radius: 50%;
	}

	width: $diameter;
	height: $diameter;
	background-color: $color;

	// No content clause is required here, despite the hard-coded radius. Specifying a border radius of 50%
	// allows us to generate a circular container.
}

/*
 * Mix-in is responsible for generating a triangular indicator depending on the passed direction
 *
 * @param $direction - the direction in which the triangular indicator will point
 * @param $width - the width of the indicator
 * @param $color - the color of the indicator
 *
 * @author kinsho
 */
@mixin triangleIndicator($direction, $width, $color)
{
	width: 0px;
	height: 0px;

	position: absolute;

	// Rendering a triangle involves some trickery with border stylings
	border:
	{
		// Do not render any specific border styling in the same direction
		// as the passed direction. Also, use transparent border coloring
		// to render the angles necessary to generate the triangle.
		top:
		{
			@if ($direction != up)
			{
				width: $width;
				color: if($direction == down, $color, transparent);
			}
		}
		bottom:
		{
			@if ($direction != down)
			{
				width: $width;
				color: if($direction == up, $color, transparent);
			}
		}
		right:
		{
			@if ($direction != right)
			{
				width: $width;
				color: if($direction == left, $color, transparent);
			}
		}
		left:
		{
			@if ($direction != left)
			{
				width: $width;
				color: if($direction == right, $color, transparent);
			}
		}
	}

	@content;
}

/*
 * Mix-in is responsible for generating an incredibly fancy checkbox
 *
 * @param $dimensions - the height/width of the resulting checkbox to generate. Note that the checkbox
 *		will have its width equal to its height, for aesthetic purposes.
 *
 * @author kinsho
 */
@mixin checkbox($dimensions: 16px)
{
	margin:
	{
		left: 15px;
	}

	& > input
	{
		display: none;

		// Styling for the check within the box
		&:checked + label:before
		{
			@extend %smallFont;

			content: "\2713";

			text-shadow: 1px 1px 1px rgba(0, 0, 0, .2);
			text-align: center;  
			line-height: 15px;
		}
	}

	& > label
	{

		// The actual checkbox is designed right here
		&:before
		{
			// Knowing that the checkbox is absolutely positioned, it will need to be spaced
			// away from its corresponding label
			margin:
			{
				right: 25px;
			}

			border:
			{
				style: solid;

				width: 1px;
				radius: 5px;
			}

			content: "";
			display: inline-block;

			position: absolute;
			left: 10px;

			width: $dimensions;
			height: $dimensions;

			background-color: map-get($COLORS, lightGrayTheme);
			box-shadow: inset 3px 2px 6px 0px rgba(0, 0, 0, .3);
		}
	}
}