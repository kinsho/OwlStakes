@include 'foundation/_animations.scss';

/* ----------------------- UTILITY MIX-INS ----------------------------- */

// The following mix-in forces any element to which it is applied to to fully render, regardless of whether content is there within the element
@mixin forceRender()
{
	&:after
	{
		content: '.';
		visibility: hidden;
	}

	// No content clause required here. The purpose of the function has nothing to do specifically with styling
}

// Mix-in truly centers an element squarely in the middle of its parent container
// Please note that the parent container MUST be explicitly relatively positioned for this to work
@mixin trueCenter($left: 50%, $top: 50%)
{
	@include shiftTransition($x: -50%, $y: -50%);

	position: absolute;
	width: auto;

	// Position the content using the default centering coordinates or the passed coordinates
	left: $left;
	top: $top;

	// No content clause required here. The purpose of the mix-in is purely functional. No point in allowing the formal override of the styling defined here
}

/*
 * Mix-in is responsible for setting the widths of all columns within a table by applying a width
 * to each TH element within the table.
 *
 * @param $columnWidths - a list containing desired widths for each column, in index order
 * @param $tableSelector - the CSS selector that will be used to reference the table
 *
 * @author kinsho
 */
@mixin setTableColumnWidths($columnWidths, $tableSelector)
{
	@for $i from 1 through length($columnWidths)
	{
		#{$tableSelector} th:nth-child( #{$i} )
		{
			width: nth($columnWidths, $i);
		}
	}

	// No content clause required here. The purpose of the mix-in is purely functional. No point in allowing the formal override of the styling defined here.
}

// Mix-in responsible for rendering an empty body within tables, either real or simulated
@mixin emptyBody()
{
	padding:
	{
		top: 15px;
		bottom: 30px;
	}

	text-align: center;
}