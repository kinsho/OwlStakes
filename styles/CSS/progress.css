/* ------- IMPORTS ------- */
/* ------- IMPORTS ------- */
/* ----------------------- LOCAL CONSTANTS ----------------------------- */
/* ----------------------- MIX-INS ----------------------------- */
/*
 * Mix-in designed to render a gradient background on a particular element
 * Works across all major browsers
 *
 * @param $initialColor - the color which will launch the gradient
 * @param $endColor - the color which will mark the tail of the rendered gradient
 * @param $direction - the direction in which the gradient will render across the background of the element
 *
 * @author kinsho
 */
/* ----------------------- IMPORTS ----------------------------- */
/* ----------------------- LOCAL CONSTANTS ----------------------------- */
/* ----------------------- MIX-INS ----------------------------- */
/*
 * Mix-in designed to render a gradient background on a particular element
 * Works across all major browsers
 *
 * @param $initialColor - the color which will launch the gradient
 * @param $endColor - the color which will mark the tail of the rendered gradient
 * @param $direction - the direction in which the gradient will render across the background of the element
 *
 * @author kinsho
 */
/* ----------------------- LOCAL CONSTANTS ----------------------------- */
/*
 * The custom font-families that the site will use are:
 *
 * Source Sans Pro
 * Cardo
 *
 */
@import url(http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700,300italic,400italic,600italic|Cardo:400,700,400italic);
/* ----------------------- LOCAL CONSTANTS ----------------------------- */
/* ----------------------- MIX-INS ----------------------------- */
/*
 * Mixin built to provide a convenient way to set basic font styles quickly
 *
 * @param $weight - the font weight
 * @param $size - the font size
 * @param $family - the font family
 * @param $style - the font style
 * @param $color - an optional parameter that allows one to specify a font color
 *
 * @author kinsho
 */
/* ----------------------- PLACEHOLDERS ----------------------------- */
/* --- Italicized and bold stylings --- */
span.percentage {
  font-weight: 700; }

/* --- Header stylings --- */
/* --- Normal text fonts --- */
span.percentage {
  font-weight: 400;
  font-size: 16px;
  font-family: Source Sans Pro, sans-serif;
  font-style: normal; }

/* --- Colored fonts --- */
/* --- Mood fonts --- */
/* ----------------------- IMPORTS ----------------------------- */
/* ----------------------- MIX-INS ----------------------------- */
/*
 * Functional mix-in responsible for setting transitions on elements
 *
 * @param $property - the property or properties upon which to set transitions upon
 * @param [$webkitProperty] - Because webkit browsers do not tolerate setting transitions upon CSS
 *		CSS properties that it does not recognize, a separate list of properties may need to be specified
 *		that would only be processed on webkit browsers
 * @param [$duration] - the number of seconds the animation is expected to last
 * @param [$timing] - the pace at which the transition will animate
 * @param [$delay] - the number of seconds to wait before initiating the animation
 * @param [$useBrowserSpecificReferences] - a flag indicating whether the passed property will need to have
 *		browser-specific prefixes prepended
 *
 * @author kinsho
 */
/*
 * Functional mix-in responsible for setting all animation-related settings across all the major browsers
 *
 * @param [$keyframeSet] - the name of the set of keyframes towards which to apply these settings
 * @param [$duration] - the duration of the animation
 * @param [$timing] - the pace at which the animation will progress
 * @param [$delay] - the amount of time to wait before the animation begins
 *
 * @author kinsho
 */
/*
 * Functional mix-in responsible for setting transitions on elements within webkit browsers
 *
 * @param $property - the property or properties upon which to set transitions upon
 * @param [$timing] - the pace at which the transition will animate
 * @param [$duration] - the number of seconds the animation is expected to last
 * @param [$delay] - the number of seconds to wait before initiating the animation
 *
 * @author kinsho
 */
/*
 * Functional mix-in responsible for setting transitions on elements within gecko browsers
 *
 * @param $property - the property or properties upon which to set transitions upon
 * @param [$timing] - the pace at which the transition will animate
 * @param [$duration] - the number of seconds the animation is expected to last
 * @param [$delay] - the number of seconds to wait before initiating the animation
 *
 * @author kinsho
 */
/*
 * Functional mix-in responsible for setting transitions on elements within trident browsers
 *
 * @param $property - the property or properties upon which to set transitions upon
 * @param [$timing] - the pace at which the transition will animate
 * @param [$duration] - the number of seconds the animation is expected to last
 * @param [$delay] - the number of seconds to wait before initiating the animation
 *
 * @author kinsho
 */
/*
 * Functional mix-in responsible for setting transitions on elements within opera browsers
 *
 * @param $property - the property or properties upon which to set transitions upon
 * @param [$timing] - the pace at which the transition will animate
 * @param [$duration] - the number of seconds the animation is expected to last
 * @param [$delay] - the number of seconds to wait before initiating the animation
 *
 * @author kinsho
 */
/*
 * Mix-in responsible for setting up keyframes across all the major browsers
 * NOTE: The content to populate the body of the keyframes are provided through the use of the
 * 		@content directive. Any invocation of this mix-in must have external content attached.
 *
 * @param $name - the name to assign to the keyframes being generated
 *
 * @author kinsho
 */
/*
 * Mix-in designed to shift elements on a two-dimensional plane
 *
 * @param [$x] - the horizontal magnitude of the shift
 * @param [$y] - the vertical magnitude of the shift
 *
 * @author kinsho
 */
/*
 * Mix-in designed to scale elements on a two-dimensional plane
 *
 * @param [$length] - the resize multiplier to apply to the length of the element
 * @param [$width] - the resize multiplier to apply to the width of the element
 *
 * @author kinsho
 */
/*
 * Mix-in designed to rotate elements on a two-dimensional plane
 *
 * @param $degrees - the amount of rotation to apply to the element
 *
 * @author kinsho
 */
/*
 * Mix-in designed to rotate elements on a three-dimensional plane
 *
 * @param $degrees - the amount of rotation to apply to the element
 * @param $rotateByX - the x-coordinate of the rotation vector
 * @param $rotateByY - the y-coordinate of the rotation vector
 * @param $rotateByZ - the z-coordinate of the rotation vector 
 *
 * @author kinsho
 */
/*
 * Mix-in designed to reset the location of the origin on a specific element
 * Moving the point of origin around allows for a variety of different 2D and 3D rotation animations on the element
 * Note that when setting a two-dimensional origin point, don't pass a parameter for the z-coordinate when invoking this mixin
 *
 * @param [$x] - the x-coordinate for the new origin coordinate
 * @param [$y] - the y-coordinate for the new origin coordinate
 * @param [$z] - the z-coordinate for the new origin coordinate
 *
 * @author kinsho
 */
/*
 * Mix-in generates an animation that shifts an element either to the left or the right
 *
 * @param $magnitude - the amount by which to shift the element toward either the left or the right
 * 		A positive value indicates a rightward shift while a negative value denotes a leftward shift.
 *
 * @author kinsho
 */
/*
 * Mix-in generates an animation that shifts an element either to the left or the right
 *
 * @param $firstMagnitude - the amount by which to shift the element toward either the left or the right
 * 		A positive value indicates a rightward shift while a negative value denotes a leftward shift.
 * @param $secondMagnitude - the amount by which to shift the element toward either the left or the right
 * 		after the first shift
 * @param $shiftChange - the point in the animation at which to switch from the first shift to the second shift
 * @param [$firstShiftTimingFunction] - the pacing function to apply to the first shift, if provided
 * @param [$secondShiftTimingFunction] - the pacing function to apply to the second shift, if provided
 *
 * @author kinsho
 */
/* ----------------------- MIX-INS ----------------------------- */
/*
 * Mix-in forces any element to which it is applied to to fully render, regardless of whether content is there within the element
 *
 * @author kinsho
 */
/*
 * Mix-in generates the container and child DIV styling necessary to allow the child elements to be positioned
 * anywhere within their host container
 *
 * @param $left - the distance which to shift the child elements rightward from the left edge of the container
 * @param $top - the distance which to shift the child elements downward from the top edge of the container 
 *
 * @author kinsho
 */
/*
 * Mix-in is responsible for setting the widths of all columns within a table by applying a width
 * to each TH element within the table.
 *
 * @param $columnWidths - a list containing desired widths for each column, in index order
 * @param $tableSelector - the CSS selector that will be used to reference the table
 *
 * @author kinsho
 */
/* ------- PROGRESS BAR STYLING ------- */
.barOutline {
  border-style: solid;
  border-width: 5px;
  border-radius: 25px;
  border-color: #cdcdcd;
  margin-left: 10px;
  margin-right: 10px;
  position: relative;
  background-color: #a0a0a0;
  width: 200px;
  display: inline-block; }

span.bar {
  background-color: #bbdbff;
  background-image: -webkit-linear-gradient(left, #bbdbff, #3399ff);
  background-image: -moz-linear-gradient(left, #bbdbff, #3399ff);
  background-image: -ms-linear-gradient(left, #bbdbff, #3399ff);
  background-image: -o-linear-gradient(left, #bbdbff, #3399ff);
  border-radius: 15px;
  display: inline-block;
  position: relative;
  width: 0px; }
  span.bar:after {
    content: '.';
    visibility: hidden; }

span.percentage {
  position: absolute;
  z-index: 10;
  /* Center the text on the input field as best as possible */
  left: 50%;
  top: 10%; }

/* ------- DEFINITIONS -------- */
/* ------- SPECIFIC STYLES ------- */
/*
// Styling for all tasks
.levelOne, .levelTwo, .levelThree
{
	padding:
	{
		left: 100px;
	}

	position: relative;
	display: block;

	&.highlight
	{
		background-color: $lightBlueTheme;
	}

	// Styling for first-level tasks
	&.levelOne
	{
		@include basicFontSettings($family: Arial, $weight: bold, $size: 20px, $color: $darkGrayTheme);

		// Set spacing between adjacent first-level tasks appropriately
		& + .levelOne
		{
			padding:
			{
				top: 20px;
			}
		}
	}

	// Styling for second-level tasks
	&.levelTwo
	{
		@include basicFontSettings($family: Palatino Linotype, $weight: bold, $size: 18px, $color: $darkGreenTheme);

		// Set spacing between adjacent second-level tasks appropriately
		& + .levelTwo
		{
			padding:
			{
				top: 15px;
			}
		}

		// Set spacing between the first and second level tasks appropriately
		&:first-of-type
		{
			padding:
			{
				top: 15px;
			}
		}
	}

	// Styling for third-level tasks
	&.levelThree
	{
		@include basicFontSettings($family: Palatino Linotype, $style: italic, $size: 14px, $color: $darkGreenTheme);

		// Set spacing between the second and third level tasks appropriately
		&:first-of-type
		{
			padding:
			{
				top: 15px;
			}
		}
	}

	span
	{
		margin:
		{
			right: 25px;
		}

		display: inline-block;
		width: 400px;
	}

	.difficulty
	{
		position: relative;
		vertical-align: middle;
		@include circle($diameter: 50px, $color: $lightRedTheme);

		&.difficultyFivePlus
		{
			@include circle($diameter: 50px, $color: $redTheme);
		}

		& > span
		{
			@include basicFontSettings($family: Arial, $weight: bold, $size: 20px, $color: $blackTheme);

			@include shiftTransition($x: -50%, $y: -50%);
			@include trueCenter();
		}
	}

	span.collapsibleIcon
	{
		padding:
		{
			left: 10px;
			right: 15px;
		}

		display: inline-block;
		width: auto;

		img
		{
			@include transitionSettings($property: transform, $duration: 1s, $useBrowserSpecificReferences: true);

			cursor: pointer;

			&.collapsed
			{
				@include rotateTransition($degrees: 180deg);
			}
		}
	}
}
*/
